package ${package.name};

#if($class.isAbstract())
@MappedSuperclass
#else
@Entity
#end
public#if($class.isAbstract()) abstract#end class ${class.name} #if(!$generalizations.isEmpty())extends ${generalizations.get(0).name} #end{

#foreach($attribute in $attributes)
#* ID *##if($attribute.isID())${TAB}@Id${NEWLINE}${TAB}@GeneratedValue${NEWLINE}#end
#*SIZE*##if($attribute.size > 0)${TAB}@Column(length=${attribute.size})${NEWLINE}#end
	${attribute.visibility.name} ${attribute.type.name} ${attribute.name};
#end

#foreach($association in $associations)
#*    *##foreach($member in $association.memberEnds)
#*            *##if($member.name == "Target" && $member.type.name != $class.name)
	private ${member.type.name} ${STRING.uncapitalize($member.type.name)};${NEWLINE}
#*            *##end
#*    *##end
#end

	public ${class.name}() {
		super();
	}

#foreach($attribute in $attributes)
	public ${attribute.type.name} get${STRING.capitalize($attribute.name)}() {
		return ${attribute.name};
	}

	public void set${STRING.capitalize($attribute.name)}(${attribute.type.name} ${attribute.name}) {
		this.${attribute.name} = ${attribute.name};
	}
#*    *##if(!$foreach.hasNext())${NEWLINE}#end
#end

#foreach($method in $methods)
#*    *##if($method.isAbstract())
	${method.visibility.name} abstract ${method.methodType.name}} ${method.name};
#*    *##else
	${method.visibility.name} ${method.methodType.name} ${method.name}() {
#*           *##if($method.methodType.name.equals("void"))
		return;
#*		     *##else
		return null;
#*		     *##end
	}
#*    *##end${NEWLINE}
#end
}