package {{ package.Name }};

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.NotNull;

@Entity
public class {{ class.Name }} implements Serializable {

	private static final long serialVersionUID = 1L;

{% for attribute in attributes %}
	{{ (attribute.isID()) 				? 	'@Id' 				: '' }}
	{{ (attribute.isID()) 				?	'@GeneratedValue' 	: '' }}
	{{ (attribute.isIsNull() == false) 	? 	'@NotNull' 			: '' }}
	{{ attribute.Visibility.Name }} {{ attribute.Type.Name }} {{ attribute.Name }};
{% endfor %}

{% for association in associations %}
	{%- set sourceMember = association.SourceMember -%}
	{%- set targetMember = association.TargetMember -%}
	
	{% if sourceMember.Type.Name == class.Name and targetMember.Type.Name == class.Name %}
	A -> A
	{% elseif sourceMember.Type.Name == class.Name %}
	A -> B
	{% elseif targetMember.Type.Name == class.Name %}
	A <- B
	{% endif %}
	
{% endfor %}

	public {{ class.Name }}() {
		super();
	}

{% for attribute in attributes %}
	public {{ attribute.Type.Name }} get{{ attribute.Name | capitalize }}() {
		return {{ attribute.Name }};
	}
	
	public void set{{ attribute.Name | capitalize }}({{ attribute.Type.Name }} {{ attribute.Name }}) {
		this.{{ attribute.Name }} = {{ attribute.Name }};
	}
{% endfor %}

{% for method in methods %}
	{% if method.isAbstract() %}
	{{ method.Visibility.Name }} abstract {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %});
	{% else %}
	{{ method.Visibility.Name }} {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %}) {
		return{% if method.MethodType is not null %} null{% endif %};
	}
	{% endif %}
{% endfor %}

}