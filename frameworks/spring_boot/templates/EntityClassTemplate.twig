package {{ package.Name }};

import java.io.Serializable;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToOne;
import javax.persistence.OneToMany;
import javax.persistence.ManyToOne;
import javax.persistence.ManyToMany;
import javax.validation.constraints.NotNull;

@Entity
public class {{ class.Name }} implements Serializable {

	private static final long serialVersionUID = 1L;

{% for attribute in attributes %}
	{{ (attribute.isID()) 				? 	'@Id' 				: '' }}
	{{ (attribute.isID()) 				?	'@GeneratedValue' 	: '' }}
	{{ (attribute.isIsNull() == false) 	? 	'@NotNull' 			: '' }}
	{{ attribute.Visibility.Name }} {{ attribute.Type.Name }} {{ attribute.Name }};
{% endfor %}

{% for association in associations %}
	{%- set sourceMember = association.SourceMember -%}
	{%- set targetMember = association.TargetMember -%}
	{%- set sourceToTargetCardinality = association.SourceToTargetCardinality -%}
	{%- set targetToSourceCardinality = association.TargetToSourceCardinality -%}
	
	{% if sourceMember.Type.Name == class.Name and targetMember.Type.Name == class.Name %}
		{# TODO #}
		{% if sourceToTargetCardinality == "OneToMany" %}
	
		{% elseif sourceToTargetCardinality == "ManyToOne" %}
		
		{% elseif sourceToTargetCardinality == "OneToOne" %}
		
		{% elseif sourceToTargetCardinality == "ManyToMany" %}
		
		{% endif %}
	{% elseif sourceMember.Type.Name == class.Name %}
		{% if sourceToTargetCardinality == "OneToMany" %}
		@OneToMany(mappedBy="{{ sourceMember.Type.Name | lower }}")
		private {{ association.Collection | title }}<{{ targetMember.Type.Name }}> collection{{ targetMember.Type.Name }};
		{% elseif sourceToTargetCardinality == "ManyToOne" %}
		@ManyToOne
		@JoinColumn(name = "{{ targetMember.Type.Name | lower }}_id")
		private {{ targetMember.Type.Name }} {{ targetMember.Type.Name | lower }};
		{% elseif sourceToTargetCardinality == "OneToOne" %}
		@OneToOne
		@JoinColumn(name = "{{ targetMember.Type.Name | lower }}_id")
		private {{ targetMember.Type.Name }} {{ targetMember.Type.Name | lower }};
		{% elseif sourceToTargetCardinality == "ManyToMany" %}
		@ManyToMany
		@JoinTable(
			name = "{{ sourceMember.Type.Name | lower }}_{{ targetMember.Type.Name | lower }}",
			joinColumns = @JoinColumn(name = "{{ sourceMember.Type.Name | lower }}_id"),
			inverseJoinColumns = @JoinColumn(name = "{{ targetMember.Type.Name | lower }}_id")
		)
		private {{ association.Collection | title }}<{{ targetMember.Type.Name }}> collection{{ targetMember.Type.Name }};
		{% endif %}
	{% elseif targetMember.Type.Name == class.Name %}
		{% if targetToSourceCardinality == "OneToMany" %}
		@OneToMany(mappedBy="{{ targetMember.Type.Name | lower }}")
		private {{ association.Collection | title }}<{{ sourceMember.Type.Name }}> collection{{ sourceMember.Type.Name }};
		{% elseif targetToSourceCardinality == "ManyToOne" %}
		@ManyToOne
		@JoinColumn(name = "{{ sourceMember.Type.Name | lower }}_id")
		private {{ sourceMember.Type.Name }} {{ sourceMember.Type.Name | lower }};
		{% elseif sourceToTargetCardinality == "OneToOne" %}
		@OneToOne(mappedBy="{{ targetMember.Type.Name | lower }}")
		private {{ sourceMember.Type.Name }} {{ sourceMember.Type.Name | lower }};
		{% elseif sourceToTargetCardinality == "ManyToMany" %}
		@ManyToMany(mappedBy="collection{{ targetMember.Type.Name }}")
		private {{ association.Collection | title }}<{{ sourceMember.Type.Name }}> collection{{ sourceMember.Type.Name }};
		{% endif %}
	{% endif %}
{% endfor %}

	public {{ class.Name }}() {
		super();
	}

{% for attribute in attributes %}
	public {{ attribute.Type.Name }} get{{ attribute.Name | capitalize }}() {
		return {{ attribute.Name }};
	}
	
	public void set{{ attribute.Name | capitalize }}({{ attribute.Type.Name }} {{ attribute.Name }}) {
		this.{{ attribute.Name }} = {{ attribute.Name }};
	}
{% endfor %}

{#
	TODO getters e setter das associacoes
#}

{% for method in methods %}
	{% if method.isAbstract() %}
	{{ method.Visibility.Name }} abstract {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %});
	{% else %}
	{{ method.Visibility.Name }} {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %}) {
		return{% if method.MethodType is not null %} null{% endif %};
	}
	{% endif %}
{% endfor %}

}